/* This file is autogenerated. DO NOT EDIT! */

import java.time.Instant

/** Характеристика счета общей собственности */
final case class CoownersInfoT(
  name: String /** Наименование счета ОС */
)

/** Способ получения уведомления */
sealed trait NotificationReceiptMethodEt {
  val code: String
  val description: String
}
/** Способ получения уведомления */
object NotificationReceiptMethodEt {
  object Personally extends NotificationReceiptMethodEt {
    override val code = "Personally"
    override val description = "Лично"
  }
  object AddressFromRegistry extends NotificationReceiptMethodEt {
    override val code = "AddressFromRegistry"
    override val description = "На адрес из СВР"
  }
  object Address extends NotificationReceiptMethodEt {
    override val code = "Address"
    override val description = "На указанный адрес"
  }
  
  lazy val values = Set[NotificationReceiptMethodEt](
    Personally,
    AddressFromRegistry,
    Address
  )
  
  val fromString: String => Option[NotificationReceiptMethodEt] = {
    s => values.find(_.code === s)
  }
}

/** Подтип ФЛ */
sealed trait IndividualSubtypeEt {
  val code: String
  val description: String
}
/** Подтип ФЛ */
object IndividualSubtypeEt {
  object SoleProprietor extends IndividualSubtypeEt {
    override val code = "SoleProprietor"
    override val description = "Индивидуальный предпрениматель"
  }
  object Notary extends IndividualSubtypeEt {
    override val code = "Notary"
    override val description = "Нотариус"
  }
  object Farming extends IndividualSubtypeEt {
    override val code = "Farming"
    override val description = "Крестьянско-фермерское хозяйство"
  }
  
  lazy val values = Set[IndividualSubtypeEt](
    SoleProprietor,
    Notary,
    Farming
  )
  
  val fromString: String => Option[IndividualSubtypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Статус дееспособности */
sealed trait LegalCapacityStateEt {
  val code: String
  val description: String
}
/** Статус дееспособности */
object LegalCapacityStateEt {
  object Incapable extends LegalCapacityStateEt {
    override val code = "Incapable"
    override val description = "Недееспособный"
  }
  object LimitedCapable extends LegalCapacityStateEt {
    override val code = "LimitedCapable"
    override val description = "Ограниченно дееспособный"
  }
  object Underage extends LegalCapacityStateEt {
    override val code = "Underage"
    override val description = "Несовершеннолетний"
  }
  
  lazy val values = Set[LegalCapacityStateEt](
    Incapable,
    LimitedCapable,
    Underage
  )
  
  val fromString: String => Option[LegalCapacityStateEt] = {
    s => values.find(_.code === s)
  }
}

/** Способ выплаты дивидендов */
sealed trait DividendPaymentMethodEt {
  val code: String
  val description: String
}
/** Способ выплаты дивидендов */
object DividendPaymentMethodEt {
  object Cash extends DividendPaymentMethodEt {
    override val code = "Cash"
    override val description = "Наличными"
  }
  object BankTransfer extends DividendPaymentMethodEt {
    override val code = "BankTransfer"
    override val description = "Банковским переводом"
  }
  object PostalTransfer extends DividendPaymentMethodEt {
    override val code = "PostalTransfer"
    override val description = "Почтовым переводом"
  }
  
  lazy val values = Set[DividendPaymentMethodEt](
    Cash,
    BankTransfer,
    PostalTransfer
  )
  
  val fromString: String => Option[DividendPaymentMethodEt] = {
    s => values.find(_.code === s)
  }
}

/** Цена/сумма */
type MoneyT = Double

/** Ссылка на документ */
final case class DocumentLinkT(
  num: Option[String] /** Номер документа */,
  date: Instant /** Дата документа */
)

/** Ссылка на операцию в реестре */
final case class OperationLinkT(
  num: Option[Int] /** Номер операции */,
  date: Instant /** Дата операции */
)

/** Код типа документа основания для передачи прав собственности */
sealed trait TransactionBaseDocumentTypeEt {
  val code: String
  val description: String
}
/** Код типа документа основания для передачи прав собственности */
object TransactionBaseDocumentTypeEt {
  object DistributionAgreement extends TransactionBaseDocumentTypeEt {
    override val code = "DistributionAgreement"
    override val description = "Агентский договор (договор комиссии)"
  }
  object SalesContract extends TransactionBaseDocumentTypeEt {
    override val code = "SalesContract"
    override val description = "Договор купли-продажи"
  }
  object LoanAgreement extends TransactionBaseDocumentTypeEt {
    override val code = "LoanAgreement"
    override val description = "Договор займа (кредитный договор)"
  }
  object CommissionAgreement extends TransactionBaseDocumentTypeEt {
    override val code = "CommissionAgreement"
    override val description = "Договор комиссии"
  }
  
  lazy val values = Set[TransactionBaseDocumentTypeEt](
    DistributionAgreement,
    SalesContract,
    LoanAgreement,
    CommissionAgreement
  )
  
  val fromString: String => Option[TransactionBaseDocumentTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** ОПФ */
sealed trait LegalOrganisationFormEt {
  val code: String
  val description: String
}
/** ОПФ */
object LegalOrganisationFormEt {
  object LLC extends LegalOrganisationFormEt {
    override val code = "LLC"
    override val description = "ООО"
  }
  object JSC extends LegalOrganisationFormEt {
    override val code = "JSC"
    override val description = "АО"
  }
  object PJSC extends LegalOrganisationFormEt {
    override val code = "PJSC"
    override val description = "ПАО"
  }
  object CJSC extends LegalOrganisationFormEt {
    override val code = "CJSC"
    override val description = "ЗАО"
  }
  
  lazy val values = Set[LegalOrganisationFormEt](
    LLC,
    JSC,
    PJSC,
    CJSC
  )
  
  val fromString: String => Option[LegalOrganisationFormEt] = {
    s => values.find(_.code === s)
  }
}

/** Общероссийский классификатор стран мира */
sealed trait CountryEt {
  val code: String
  val description: String
}
/** Общероссийский классификатор стран мира */
object CountryEt {
  object AB extends CountryEt {
    override val code = "AB"
    override val description = "АБХАЗИЯ"
  }
  object AU extends CountryEt {
    override val code = "AU"
    override val description = "АВСТРАЛИЯ"
  }
  object AT extends CountryEt {
    override val code = "AT"
    override val description = "АВСТРИЯ"
  }
  object AZ extends CountryEt {
    override val code = "AZ"
    override val description = "АЗЕРБАЙДЖАН"
  }
  object AL extends CountryEt {
    override val code = "AL"
    override val description = "АЛБАНИЯ"
  }
  object DZ extends CountryEt {
    override val code = "DZ"
    override val description = "АЛЖИР"
  }
  object AS extends CountryEt {
    override val code = "AS"
    override val description = "АМЕРИКАНСКОЕ САМОА"
  }
  object AI extends CountryEt {
    override val code = "AI"
    override val description = "АНГИЛЬЯ"
  }
  object AO extends CountryEt {
    override val code = "AO"
    override val description = "АНГОЛА"
  }
  object AD extends CountryEt {
    override val code = "AD"
    override val description = "АНДОРРА"
  }
  object AQ extends CountryEt {
    override val code = "AQ"
    override val description = "АНТАРКТИДА"
  }
  object AG extends CountryEt {
    override val code = "AG"
    override val description = "АНТИГУА И БАРБУДА"
  }
  object AR extends CountryEt {
    override val code = "AR"
    override val description = "АРГЕНТИНА"
  }
  object AM extends CountryEt {
    override val code = "AM"
    override val description = "АРМЕНИЯ"
  }
  object AW extends CountryEt {
    override val code = "AW"
    override val description = "АРУБА"
  }
  object AF extends CountryEt {
    override val code = "AF"
    override val description = "АФГАНИСТАН"
  }
  object BS extends CountryEt {
    override val code = "BS"
    override val description = "БАГАМЫ"
  }
  object BD extends CountryEt {
    override val code = "BD"
    override val description = "БАНГЛАДЕШ"
  }
  object BB extends CountryEt {
    override val code = "BB"
    override val description = "БАРБАДОС"
  }
  object BH extends CountryEt {
    override val code = "BH"
    override val description = "БАХРЕЙН"
  }
  object BY extends CountryEt {
    override val code = "BY"
    override val description = "БЕЛАРУСЬ"
  }
  object BZ extends CountryEt {
    override val code = "BZ"
    override val description = "БЕЛИЗ"
  }
  object BE extends CountryEt {
    override val code = "BE"
    override val description = "БЕЛЬГИЯ"
  }
  object BJ extends CountryEt {
    override val code = "BJ"
    override val description = "БЕНИН"
  }
  object BM extends CountryEt {
    override val code = "BM"
    override val description = "БЕРМУДЫ"
  }
  object BG extends CountryEt {
    override val code = "BG"
    override val description = "БОЛГАРИЯ"
  }
  object BO extends CountryEt {
    override val code = "BO"
    override val description = "БОЛИВИЯ, МНОГОНАЦИОНАЛЬНОЕ ГОСУДАРСТВО"
  }
  object BA extends CountryEt {
    override val code = "BA"
    override val description = "БОСНИЯ И ГЕРЦЕГОВИНА"
  }
  object BW extends CountryEt {
    override val code = "BW"
    override val description = "БОТСВАНА"
  }
  object BR extends CountryEt {
    override val code = "BR"
    override val description = "БРАЗИЛИЯ"
  }
  object IO extends CountryEt {
    override val code = "IO"
    override val description = "БРИТАНСКАЯ ТЕРРИТОРИЯ В ИНДИЙСКОМ ОКЕАНЕ"
  }
  object BN extends CountryEt {
    override val code = "BN"
    override val description = "БРУНЕЙ-ДАРУССАЛАМ"
  }
  object BF extends CountryEt {
    override val code = "BF"
    override val description = "БУРКИНА-ФАСО"
  }
  object BI extends CountryEt {
    override val code = "BI"
    override val description = "БУРУНДИ"
  }
  object BT extends CountryEt {
    override val code = "BT"
    override val description = "БУТАН"
  }
  object VU extends CountryEt {
    override val code = "VU"
    override val description = "ВАНУАТУ"
  }
  object HU extends CountryEt {
    override val code = "HU"
    override val description = "ВЕНГРИЯ"
  }
  object VE extends CountryEt {
    override val code = "VE"
    override val description = "ВЕНЕСУЭЛА БОЛИВАРИАНСКАЯ РЕСПУБЛИКА"
  }
  object VG extends CountryEt {
    override val code = "VG"
    override val description = "ВИРГИНСКИЕ ОСТРОВА, БРИТАНСКИЕ"
  }
  object VI extends CountryEt {
    override val code = "VI"
    override val description = "ВИРГИНСКИЕ ОСТРОВА, США"
  }
  object VN extends CountryEt {
    override val code = "VN"
    override val description = "ВЬЕТНАМ"
  }
  object GA extends CountryEt {
    override val code = "GA"
    override val description = "ГАБОН"
  }
  object GY extends CountryEt {
    override val code = "GY"
    override val description = "ГАЙАНА"
  }
  object HT extends CountryEt {
    override val code = "HT"
    override val description = "ГАИТИ"
  }
  object GM extends CountryEt {
    override val code = "GM"
    override val description = "ГАМБИЯ"
  }
  object GH extends CountryEt {
    override val code = "GH"
    override val description = "ГАНА"
  }
  object GP extends CountryEt {
    override val code = "GP"
    override val description = "ГВАДЕЛУПА"
  }
  object GT extends CountryEt {
    override val code = "GT"
    override val description = "ГВАТЕМАЛА"
  }
  object GN extends CountryEt {
    override val code = "GN"
    override val description = "ГВИНЕЯ"
  }
  object GW extends CountryEt {
    override val code = "GW"
    override val description = "ГВИНЕЯ-БИСАУ"
  }
  object DE extends CountryEt {
    override val code = "DE"
    override val description = "ГЕРМАНИЯ"
  }
  object GG extends CountryEt {
    override val code = "GG"
    override val description = "ГЕРНСИ"
  }
  object GI extends CountryEt {
    override val code = "GI"
    override val description = "ГИБРАЛТАР"
  }
  object HN extends CountryEt {
    override val code = "HN"
    override val description = "ГОНДУРАС"
  }
  object HK extends CountryEt {
    override val code = "HK"
    override val description = "ГОНКОНГ"
  }
  object GD extends CountryEt {
    override val code = "GD"
    override val description = "ГРЕНАДА"
  }
  object GL extends CountryEt {
    override val code = "GL"
    override val description = "ГРЕНЛАНДИЯ"
  }
  object GR extends CountryEt {
    override val code = "GR"
    override val description = "ГРЕЦИЯ"
  }
  object GE extends CountryEt {
    override val code = "GE"
    override val description = "ГРУЗИЯ"
  }
  object GU extends CountryEt {
    override val code = "GU"
    override val description = "ГУАМ"
  }
  object DK extends CountryEt {
    override val code = "DK"
    override val description = "ДАНИЯ"
  }
  object JE extends CountryEt {
    override val code = "JE"
    override val description = "ДЖЕРСИ"
  }
  object DJ extends CountryEt {
    override val code = "DJ"
    override val description = "ДЖИБУТИ"
  }
  object DM extends CountryEt {
    override val code = "DM"
    override val description = "ДОМИНИКА"
  }
  object DO extends CountryEt {
    override val code = "DO"
    override val description = "ДОМИНИКАНСКАЯ РЕСПУБЛИКА"
  }
  object EG extends CountryEt {
    override val code = "EG"
    override val description = "ЕГИПЕТ"
  }
  object ZM extends CountryEt {
    override val code = "ZM"
    override val description = "ЗАМБИЯ"
  }
  object EH extends CountryEt {
    override val code = "EH"
    override val description = "ЗАПАДНАЯ САХАРА"
  }
  object ZW extends CountryEt {
    override val code = "ZW"
    override val description = "ЗИМБАБВЕ"
  }
  object YE extends CountryEt {
    override val code = "YE"
    override val description = "ЙЕМЕН"
  }
  object IL extends CountryEt {
    override val code = "IL"
    override val description = "ИЗРАИЛЬ"
  }
  object IN extends CountryEt {
    override val code = "IN"
    override val description = "ИНДИЯ"
  }
  object ID extends CountryEt {
    override val code = "ID"
    override val description = "ИНДОНЕЗИЯ"
  }
  object JO extends CountryEt {
    override val code = "JO"
    override val description = "ИОРДАНИЯ"
  }
  object IQ extends CountryEt {
    override val code = "IQ"
    override val description = "ИРАК"
  }
  object IR extends CountryEt {
    override val code = "IR"
    override val description = "ИРАН, ИСЛАМСКАЯ РЕСПУБЛИКА"
  }
  object IE extends CountryEt {
    override val code = "IE"
    override val description = "ИРЛАНДИЯ"
  }
  object IS extends CountryEt {
    override val code = "IS"
    override val description = "ИСЛАНДИЯ"
  }
  object ES extends CountryEt {
    override val code = "ES"
    override val description = "ИСПАНИЯ"
  }
  object IT extends CountryEt {
    override val code = "IT"
    override val description = "ИТАЛИЯ"
  }
  object CV extends CountryEt {
    override val code = "CV"
    override val description = "КАБО-ВЕРДЕ"
  }
  object KZ extends CountryEt {
    override val code = "KZ"
    override val description = "КАЗАХСТАН"
  }
  object KH extends CountryEt {
    override val code = "KH"
    override val description = "КАМБОДЖА"
  }
  object CM extends CountryEt {
    override val code = "CM"
    override val description = "КАМЕРУН"
  }
  object CA extends CountryEt {
    override val code = "CA"
    override val description = "КАНАДА"
  }
  object QA extends CountryEt {
    override val code = "QA"
    override val description = "КАТАР"
  }
  object KE extends CountryEt {
    override val code = "KE"
    override val description = "КЕНИЯ"
  }
  object CY extends CountryEt {
    override val code = "CY"
    override val description = "КИПР"
  }
  object KG extends CountryEt {
    override val code = "KG"
    override val description = "КИРГИЗИЯ"
  }
  object KI extends CountryEt {
    override val code = "KI"
    override val description = "КИРИБАТИ"
  }
  object CN extends CountryEt {
    override val code = "CN"
    override val description = "КИТАЙ"
  }
  object CC extends CountryEt {
    override val code = "CC"
    override val description = "КОКОСОВЫЕ (КИЛИНГ) ОСТРОВА"
  }
  object CO extends CountryEt {
    override val code = "CO"
    override val description = "КОЛУМБИЯ"
  }
  object KM extends CountryEt {
    override val code = "KM"
    override val description = "КОМОРЫ"
  }
  object CG extends CountryEt {
    override val code = "CG"
    override val description = "КОНГО"
  }
  object CD extends CountryEt {
    override val code = "CD"
    override val description = "КОНГО, ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА"
  }
  object KP extends CountryEt {
    override val code = "KP"
    override val description = "КОРЕЯ, НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА"
  }
  object KR extends CountryEt {
    override val code = "KR"
    override val description = "КОРЕЯ, РЕСПУБЛИКА"
  }
  object CR extends CountryEt {
    override val code = "CR"
    override val description = "КОСТА-РИКА"
  }
  object CI extends CountryEt {
    override val code = "CI"
    override val description = "КОТ Д'ИВУАР"
  }
  object CU extends CountryEt {
    override val code = "CU"
    override val description = "КУБА"
  }
  object KW extends CountryEt {
    override val code = "KW"
    override val description = "КУВЕЙТ"
  }
  object LA extends CountryEt {
    override val code = "LA"
    override val description = "ЛАОССКАЯ НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА"
  }
  object LV extends CountryEt {
    override val code = "LV"
    override val description = "ЛАТВИЯ"
  }
  object LS extends CountryEt {
    override val code = "LS"
    override val description = "ЛЕСОТО"
  }
  object LR extends CountryEt {
    override val code = "LR"
    override val description = "ЛИБЕРИЯ"
  }
  object LB extends CountryEt {
    override val code = "LB"
    override val description = "ЛИВАН"
  }
  object LY extends CountryEt {
    override val code = "LY"
    override val description = "ЛИВИЙСКАЯ АРАБСКАЯ ДЖАМАХИРИЯ"
  }
  object LT extends CountryEt {
    override val code = "LT"
    override val description = "ЛИТВА"
  }
  object LI extends CountryEt {
    override val code = "LI"
    override val description = "ЛИХТЕНШТЕЙН"
  }
  object LU extends CountryEt {
    override val code = "LU"
    override val description = "ЛЮКСЕМБУРГ"
  }
  object MU extends CountryEt {
    override val code = "MU"
    override val description = "МАВРИКИЙ"
  }
  object MR extends CountryEt {
    override val code = "MR"
    override val description = "МАВРИТАНИЯ"
  }
  object MG extends CountryEt {
    override val code = "MG"
    override val description = "МАДАГАСКАР"
  }
  object YT extends CountryEt {
    override val code = "YT"
    override val description = "МАЙОТТА"
  }
  object MO extends CountryEt {
    override val code = "MO"
    override val description = "МАКАО"
  }
  object MW extends CountryEt {
    override val code = "MW"
    override val description = "МАЛАВИ"
  }
  object MY extends CountryEt {
    override val code = "MY"
    override val description = "МАЛАЙЗИЯ"
  }
  object ML extends CountryEt {
    override val code = "ML"
    override val description = "МАЛИ"
  }
  object UM extends CountryEt {
    override val code = "UM"
    override val description = "МАЛЫЕ ТИХООКЕАНСКИЕ ОТДАЛЕННЫЕ ОСТРОВА СОЕДИНЕННЫХ ШТАТОВ"
  }
  object MV extends CountryEt {
    override val code = "MV"
    override val description = "МАЛЬДИВЫ"
  }
  object MT extends CountryEt {
    override val code = "MT"
    override val description = "МАЛЬТА"
  }
  object MA extends CountryEt {
    override val code = "MA"
    override val description = "МАРОККО"
  }
  object MQ extends CountryEt {
    override val code = "MQ"
    override val description = "МАРТИНИКА"
  }
  object MH extends CountryEt {
    override val code = "MH"
    override val description = "МАРШАЛЛОВЫ ОСТРОВА"
  }
  object MX extends CountryEt {
    override val code = "MX"
    override val description = "МЕКСИКА"
  }
  object FM extends CountryEt {
    override val code = "FM"
    override val description = "МИКРОНЕЗИЯ, ФЕДЕРАТИВНЫЕ ШТАТЫ"
  }
  object MZ extends CountryEt {
    override val code = "MZ"
    override val description = "МОЗАМБИК"
  }
  object MD extends CountryEt {
    override val code = "MD"
    override val description = "МОЛДОВА, РЕСПУБЛИКА"
  }
  object MC extends CountryEt {
    override val code = "MC"
    override val description = "МОНАКО"
  }
  object MN extends CountryEt {
    override val code = "MN"
    override val description = "МОНГОЛИЯ"
  }
  object MS extends CountryEt {
    override val code = "MS"
    override val description = "МОНТСЕРРАТ"
  }
  object MM extends CountryEt {
    override val code = "MM"
    override val description = "МЬЯНМА"
  }
  object NA extends CountryEt {
    override val code = "NA"
    override val description = "НАМИБИЯ"
  }
  object NR extends CountryEt {
    override val code = "NR"
    override val description = "НАУРУ"
  }
  object NP extends CountryEt {
    override val code = "NP"
    override val description = "НЕПАЛ"
  }
  object NE extends CountryEt {
    override val code = "NE"
    override val description = "НИГЕР"
  }
  object NG extends CountryEt {
    override val code = "NG"
    override val description = "НИГЕРИЯ"
  }
  object AN extends CountryEt {
    override val code = "AN"
    override val description = "НИДЕРЛАНДСКИЕ АНТИЛЫ"
  }
  object NL extends CountryEt {
    override val code = "NL"
    override val description = "НИДЕРЛАНДЫ"
  }
  object NI extends CountryEt {
    override val code = "NI"
    override val description = "НИКАРАГУА"
  }
  object NU extends CountryEt {
    override val code = "NU"
    override val description = "НИУЭ"
  }
  object NZ extends CountryEt {
    override val code = "NZ"
    override val description = "НОВАЯ ЗЕЛАНДИЯ"
  }
  object NC extends CountryEt {
    override val code = "NC"
    override val description = "НОВАЯ КАЛЕДОНИЯ"
  }
  object NO extends CountryEt {
    override val code = "NO"
    override val description = "НОРВЕГИЯ"
  }
  object AE extends CountryEt {
    override val code = "AE"
    override val description = "ОБЪЕДИНЕННЫЕ АРАБСКИЕ ЭМИРАТЫ"
  }
  object OM extends CountryEt {
    override val code = "OM"
    override val description = "ОМАН"
  }
  object BV extends CountryEt {
    override val code = "BV"
    override val description = "ОСТРОВ БУВЕ"
  }
  object IM extends CountryEt {
    override val code = "IM"
    override val description = "ОСТРОВ МЭН"
  }
  object NF extends CountryEt {
    override val code = "NF"
    override val description = "ОСТРОВ НОРФОЛК"
  }
  object CX extends CountryEt {
    override val code = "CX"
    override val description = "ОСТРОВ РОЖДЕСТВА"
  }
  object HM extends CountryEt {
    override val code = "HM"
    override val description = "ОСТРОВ ХЕРД И ОСТРОВА МАКДОНАЛЬД"
  }
  object KY extends CountryEt {
    override val code = "KY"
    override val description = "ОСТРОВА КАЙМАН"
  }
  object CK extends CountryEt {
    override val code = "CK"
    override val description = "ОСТРОВА КУКА"
  }
  object TC extends CountryEt {
    override val code = "TC"
    override val description = "ОСТРОВА ТЕРКС И КАЙКОС"
  }
  object PK extends CountryEt {
    override val code = "PK"
    override val description = "ПАКИСТАН"
  }
  object PW extends CountryEt {
    override val code = "PW"
    override val description = "ПАЛАУ"
  }
  object PS extends CountryEt {
    override val code = "PS"
    override val description = "ПАЛЕСТИНСКАЯ ТЕРРИТОРИЯ, ОККУПИРОВАННАЯ"
  }
  object PA extends CountryEt {
    override val code = "PA"
    override val description = "ПАНАМА"
  }
  object VA extends CountryEt {
    override val code = "VA"
    override val description = "ПАПСКИЙ ПРЕСТОЛ (ГОСУДАРСТВО - ГОРОД ВАТИКАН)"
  }
  object PG extends CountryEt {
    override val code = "PG"
    override val description = "ПАПУА-НОВАЯ ГВИНЕЯ"
  }
  object PY extends CountryEt {
    override val code = "PY"
    override val description = "ПАРАГВАЙ"
  }
  object PE extends CountryEt {
    override val code = "PE"
    override val description = "ПЕРУ"
  }
  object PN extends CountryEt {
    override val code = "PN"
    override val description = "ПИТКЕРН"
  }
  object PL extends CountryEt {
    override val code = "PL"
    override val description = "ПОЛЬША"
  }
  object PT extends CountryEt {
    override val code = "PT"
    override val description = "ПОРТУГАЛИЯ"
  }
  object PR extends CountryEt {
    override val code = "PR"
    override val description = "ПУЭРТО-РИКО"
  }
  object MK extends CountryEt {
    override val code = "MK"
    override val description = "РЕСПУБЛИКА МАКЕДОНИЯ[3]"
  }
  object RE extends CountryEt {
    override val code = "RE"
    override val description = "РЕЮНЬОН"
  }
  object RU extends CountryEt {
    override val code = "RU"
    override val description = "РОССИЯ"
  }
  object RW extends CountryEt {
    override val code = "RW"
    override val description = "РУАНДА"
  }
  object RO extends CountryEt {
    override val code = "RO"
    override val description = "РУМЫНИЯ"
  }
  object WS extends CountryEt {
    override val code = "WS"
    override val description = "САМОА"
  }
  object SM extends CountryEt {
    override val code = "SM"
    override val description = "САН-МАРИНО"
  }
  object ST extends CountryEt {
    override val code = "ST"
    override val description = "САН-ТОМЕ И ПРИНСИПИ"
  }
  object SA extends CountryEt {
    override val code = "SA"
    override val description = "САУДОВСКАЯ АРАВИЯ"
  }
  object SZ extends CountryEt {
    override val code = "SZ"
    override val description = "СВАЗИЛЕНД"
  }
  object SH extends CountryEt {
    override val code = "SH"
    override val description = "СВЯТАЯ ЕЛЕНА"
  }
  object MP extends CountryEt {
    override val code = "MP"
    override val description = "СЕВЕРНЫЕ МАРИАНСКИЕ ОСТРОВА"
  }
  object SC extends CountryEt {
    override val code = "SC"
    override val description = "СЕЙШЕЛЫ"
  }
  object BL extends CountryEt {
    override val code = "BL"
    override val description = "СЕН-БАРТЕЛЕМИ"
  }
  object SN extends CountryEt {
    override val code = "SN"
    override val description = "СЕНЕГАЛ"
  }
  object MF extends CountryEt {
    override val code = "MF"
    override val description = "СЕН-МАРТЕН"
  }
  object VC extends CountryEt {
    override val code = "VC"
    override val description = "СЕНТ-ВИНСЕНТ И ГРЕНАДИНЫ"
  }
  object KN extends CountryEt {
    override val code = "KN"
    override val description = "СЕНТ-КИТС И НЕВИС"
  }
  object LC extends CountryEt {
    override val code = "LC"
    override val description = "СЕНТ-ЛЮСИЯ"
  }
  object PM extends CountryEt {
    override val code = "PM"
    override val description = "СЕНТ-ПЬЕР И МИКЕЛОН"
  }
  object RS extends CountryEt {
    override val code = "RS"
    override val description = "СЕРБИЯ"
  }
  object SG extends CountryEt {
    override val code = "SG"
    override val description = "СИНГАПУР"
  }
  object SY extends CountryEt {
    override val code = "SY"
    override val description = "СИРИЙСКАЯ АРАБСКАЯ РЕСПУБЛИКА"
  }
  object SK extends CountryEt {
    override val code = "SK"
    override val description = "СЛОВАКИЯ"
  }
  object SI extends CountryEt {
    override val code = "SI"
    override val description = "СЛОВЕНИЯ"
  }
  object GB extends CountryEt {
    override val code = "GB"
    override val description = "СОЕДИНЕННОЕ КОРОЛЕВСТВО"
  }
  object US extends CountryEt {
    override val code = "US"
    override val description = "СОЕДИНЕННЫЕ ШТАТЫ"
  }
  object SB extends CountryEt {
    override val code = "SB"
    override val description = "СОЛОМОНОВЫ ОСТРОВА"
  }
  object SO extends CountryEt {
    override val code = "SO"
    override val description = "СОМАЛИ"
  }
  object SD extends CountryEt {
    override val code = "SD"
    override val description = "СУДАН"
  }
  object SR extends CountryEt {
    override val code = "SR"
    override val description = "СУРИНАМ"
  }
  object SL extends CountryEt {
    override val code = "SL"
    override val description = "СЬЕРРА-ЛЕОНЕ"
  }
  object TJ extends CountryEt {
    override val code = "TJ"
    override val description = "ТАДЖИКИСТАН"
  }
  object TW extends CountryEt {
    override val code = "TW"
    override val description = "ТАЙВАНЬ (КИТАЙ)"
  }
  object TH extends CountryEt {
    override val code = "TH"
    override val description = "ТАИЛАНД"
  }
  object TZ extends CountryEt {
    override val code = "TZ"
    override val description = "ТАНЗАНИЯ, ОБЪЕДИНЕННАЯ РЕСПУБЛИКА"
  }
  object TL extends CountryEt {
    override val code = "TL"
    override val description = "ТИМОР-ЛЕСТЕ"
  }
  object TG extends CountryEt {
    override val code = "TG"
    override val description = "ТОГО"
  }
  object TK extends CountryEt {
    override val code = "TK"
    override val description = "ТОКЕЛАУ"
  }
  object TO extends CountryEt {
    override val code = "TO"
    override val description = "ТОНГА"
  }
  object TT extends CountryEt {
    override val code = "TT"
    override val description = "ТРИНИДАД И ТОБАГО"
  }
  object TV extends CountryEt {
    override val code = "TV"
    override val description = "ТУВАЛУ"
  }
  object TN extends CountryEt {
    override val code = "TN"
    override val description = "ТУНИС"
  }
  object TM extends CountryEt {
    override val code = "TM"
    override val description = "ТУРКМЕНИЯ"
  }
  object TR extends CountryEt {
    override val code = "TR"
    override val description = "ТУРЦИЯ"
  }
  object UG extends CountryEt {
    override val code = "UG"
    override val description = "УГАНДА"
  }
  object UZ extends CountryEt {
    override val code = "UZ"
    override val description = "УЗБЕКИСТАН"
  }
  object UA extends CountryEt {
    override val code = "UA"
    override val description = "УКРАИНА"
  }
  object WF extends CountryEt {
    override val code = "WF"
    override val description = "УОЛЛИС И ФУТУНА"
  }
  object UY extends CountryEt {
    override val code = "UY"
    override val description = "УРУГВАЙ"
  }
  object FO extends CountryEt {
    override val code = "FO"
    override val description = "ФАРЕРСКИЕ ОСТРОВА"
  }
  object FJ extends CountryEt {
    override val code = "FJ"
    override val description = "ФИДЖИ"
  }
  object PH extends CountryEt {
    override val code = "PH"
    override val description = "ФИЛИППИНЫ"
  }
  object FI extends CountryEt {
    override val code = "FI"
    override val description = "ФИНЛЯНДИЯ"
  }
  object FK extends CountryEt {
    override val code = "FK"
    override val description = "ФОЛКЛЕНДСКИЕ ОСТРОВА (МАЛЬВИНСКИЕ)"
  }
  object FR extends CountryEt {
    override val code = "FR"
    override val description = "ФРАНЦИЯ"
  }
  object GF extends CountryEt {
    override val code = "GF"
    override val description = "ФРАНЦУЗСКАЯ ГВИАНА"
  }
  object PF extends CountryEt {
    override val code = "PF"
    override val description = "ФРАНЦУЗСКАЯ ПОЛИНЕЗИЯ"
  }
  object TF extends CountryEt {
    override val code = "TF"
    override val description = "ФРАНЦУЗСКИЕ ЮЖНЫЕ ТЕРРИТОРИИ"
  }
  object HR extends CountryEt {
    override val code = "HR"
    override val description = "ХОРВАТИЯ"
  }
  object CF extends CountryEt {
    override val code = "CF"
    override val description = "ЦЕНТРАЛЬНО-АФРИКАНСКАЯ РЕСПУБЛИКА"
  }
  object TD extends CountryEt {
    override val code = "TD"
    override val description = "ЧАД"
  }
  object ME extends CountryEt {
    override val code = "ME"
    override val description = "ЧЕРНОГОРИЯ"
  }
  object CZ extends CountryEt {
    override val code = "CZ"
    override val description = "ЧЕШСКАЯ РЕСПУБЛИКА"
  }
  object CL extends CountryEt {
    override val code = "CL"
    override val description = "ЧИЛИ"
  }
  object CH extends CountryEt {
    override val code = "CH"
    override val description = "ШВЕЙЦАРИЯ"
  }
  object SE extends CountryEt {
    override val code = "SE"
    override val description = "ШВЕЦИЯ"
  }
  object SJ extends CountryEt {
    override val code = "SJ"
    override val description = "ШПИЦБЕРГЕН И ЯН МАЙЕН"
  }
  object LK extends CountryEt {
    override val code = "LK"
    override val description = "ШРИ-ЛАНКА"
  }
  object EC extends CountryEt {
    override val code = "EC"
    override val description = "ЭКВАДОР"
  }
  object GQ extends CountryEt {
    override val code = "GQ"
    override val description = "ЭКВАТОРИАЛЬНАЯ ГВИНЕЯ"
  }
  object AX extends CountryEt {
    override val code = "AX"
    override val description = "ЭЛАНДСКИЕ ОСТРОВА"
  }
  object SV extends CountryEt {
    override val code = "SV"
    override val description = "ЭЛЬ-САЛЬВАДОР"
  }
  object ER extends CountryEt {
    override val code = "ER"
    override val description = "ЭРИТРЕЯ"
  }
  object EE extends CountryEt {
    override val code = "EE"
    override val description = "ЭСТОНИЯ"
  }
  object ET extends CountryEt {
    override val code = "ET"
    override val description = "ЭФИОПИЯ"
  }
  object ZA extends CountryEt {
    override val code = "ZA"
    override val description = "ЮЖНАЯ АФРИКА"
  }
  object GS extends CountryEt {
    override val code = "GS"
    override val description = "ЮЖНАЯ ДЖОРДЖИЯ И ЮЖНЫЕ САНДВИЧЕВЫ ОСТРОВА"
  }
  object OS extends CountryEt {
    override val code = "OS"
    override val description = "ЮЖНАЯ ОСЕТИЯ"
  }
  object JM extends CountryEt {
    override val code = "JM"
    override val description = "ЯМАЙКА"
  }
  object JP extends CountryEt {
    override val code = "JP"
    override val description = "ЯПОНИЯ"
  }
  
  lazy val values = Set[CountryEt](
    AB,
    AU,
    AT,
    AZ,
    AL,
    DZ,
    AS,
    AI,
    AO,
    AD,
    AQ,
    AG,
    AR,
    AM,
    AW,
    AF,
    BS,
    BD,
    BB,
    BH,
    BY,
    BZ,
    BE,
    BJ,
    BM,
    BG,
    BO,
    BA,
    BW,
    BR,
    IO,
    BN,
    BF,
    BI,
    BT,
    VU,
    HU,
    VE,
    VG,
    VI,
    VN,
    GA,
    GY,
    HT,
    GM,
    GH,
    GP,
    GT,
    GN,
    GW,
    DE,
    GG,
    GI,
    HN,
    HK,
    GD,
    GL,
    GR,
    GE,
    GU,
    DK,
    JE,
    DJ,
    DM,
    DO,
    EG,
    ZM,
    EH,
    ZW,
    YE,
    IL,
    IN,
    ID,
    JO,
    IQ,
    IR,
    IE,
    IS,
    ES,
    IT,
    CV,
    KZ,
    KH,
    CM,
    CA,
    QA,
    KE,
    CY,
    KG,
    KI,
    CN,
    CC,
    CO,
    KM,
    CG,
    CD,
    KP,
    KR,
    CR,
    CI,
    CU,
    KW,
    LA,
    LV,
    LS,
    LR,
    LB,
    LY,
    LT,
    LI,
    LU,
    MU,
    MR,
    MG,
    YT,
    MO,
    MW,
    MY,
    ML,
    UM,
    MV,
    MT,
    MA,
    MQ,
    MH,
    MX,
    FM,
    MZ,
    MD,
    MC,
    MN,
    MS,
    MM,
    NA,
    NR,
    NP,
    NE,
    NG,
    AN,
    NL,
    NI,
    NU,
    NZ,
    NC,
    NO,
    AE,
    OM,
    BV,
    IM,
    NF,
    CX,
    HM,
    KY,
    CK,
    TC,
    PK,
    PW,
    PS,
    PA,
    VA,
    PG,
    PY,
    PE,
    PN,
    PL,
    PT,
    PR,
    MK,
    RE,
    RU,
    RW,
    RO,
    WS,
    SM,
    ST,
    SA,
    SZ,
    SH,
    MP,
    SC,
    BL,
    SN,
    MF,
    VC,
    KN,
    LC,
    PM,
    RS,
    SG,
    SY,
    SK,
    SI,
    GB,
    US,
    SB,
    SO,
    SD,
    SR,
    SL,
    TJ,
    TW,
    TH,
    TZ,
    TL,
    TG,
    TK,
    TO,
    TT,
    TV,
    TN,
    TM,
    TR,
    UG,
    UZ,
    UA,
    WF,
    UY,
    FO,
    FJ,
    PH,
    FI,
    FK,
    FR,
    GF,
    PF,
    TF,
    HR,
    CF,
    TD,
    ME,
    CZ,
    CL,
    CH,
    SE,
    SJ,
    LK,
    EC,
    GQ,
    AX,
    SV,
    ER,
    EE,
    ET,
    ZA,
    GS,
    OS,
    JM,
    JP
  )
  
  val fromString: String => Option[CountryEt] = {
    s => values.find(_.code === s)
  }
}

/** Информация о банке */
final case class BankInfoT(
  bic: String /** БИК */,
  name: String /** Наименование */,
  locality: String /** Населенный пункт */,
  correspondentAccount: String /** Корреспондентский счет */,
  branchName: Option[String] /** Наименование отделения банка */
)

/** Информация о получателе платежа */
final case class PaymentReceiverInfoT(
  name: String /** Наименование получателя */,
  inn: String /** ИНН получателя */
)

/** Тип иностранного публичного должностного лица */
sealed trait ForeignPublicOfficialTypeEt {
  val code: String
  val description: String
}
/** Тип иностранного публичного должностного лица */
object ForeignPublicOfficialTypeEt {
  object Himself extends ForeignPublicOfficialTypeEt {
    override val code = "Himself"
    override val description = "Иностранное публичное должностное лицо"
  }
  object Relative extends ForeignPublicOfficialTypeEt {
    override val code = "Relative"
    override val description = "Родственник иностранного публичного должностного лица"
  }
  
  lazy val values = Set[ForeignPublicOfficialTypeEt](
    Himself,
    Relative
  )
  
  val fromString: String => Option[ForeignPublicOfficialTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Типы участников обмена */
sealed trait ExchangeParticipantTypeEt {
  val code: String
  val description: String
}
/** Типы участников обмена */
object ExchangeParticipantTypeEt {
  object Registrar extends ExchangeParticipantTypeEt {
    override val code = "Registrar"
    override val description = "Регистратор (реестродержатель)"
  }
  object RegistrarSubdivision extends ExchangeParticipantTypeEt {
    override val code = "RegistrarSubdivision"
    override val description = "Подразделение регистратора"
  }
  
  lazy val values = Set[ExchangeParticipantTypeEt](
    Registrar,
    RegistrarSubdivision
  )
  
  val fromString: String => Option[ExchangeParticipantTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Тип субъекта, в отношении которого подается документ */
sealed trait DocumentPersonKindEt {
  val code: String
  val description: String
}
/** Тип субъекта, в отношении которого подается документ */
object DocumentPersonKindEt {
  object Self extends DocumentPersonKindEt {
    override val code = "Self"
    override val description = "В отношении себя"
  }
  object OtherPerson extends DocumentPersonKindEt {
    override val code = "OtherPerson"
    override val description = "В отношении себя"
  }
  object GroupOfPersons extends DocumentPersonKindEt {
    override val code = "GroupOfPersons"
    override val description = "В отношении группы лиц"
  }
  
  lazy val values = Set[DocumentPersonKindEt](
    Self,
    OtherPerson,
    GroupOfPersons
  )
  
  val fromString: String => Option[DocumentPersonKindEt] = {
    s => values.find(_.code === s)
  }
}

/** Категория ценной бумаги - по предоставляемым правам */
sealed trait SecurityCategoryEt {
  val code: String
  val description: String
}
/** Категория ценной бумаги - по предоставляемым правам */
object SecurityCategoryEt {
  object Ordinary extends SecurityCategoryEt {
    override val code = "Ordinary"
    override val description = "Обыкновенная"
  }
  object Privileged extends SecurityCategoryEt {
    override val code = "Privileged"
    override val description = "Привилегированная"
  }
  
  lazy val values = Set[SecurityCategoryEt](
    Ordinary,
    Privileged
  )
  
  val fromString: String => Option[SecurityCategoryEt] = {
    s => values.find(_.code === s)
  }
}

/** Тип счета */
sealed trait AccountKindEt {
  val code: String
  val description: String
}
/** Тип счета */
object AccountKindEt {
  object Issuance extends AccountKindEt {
    override val code = "Issuance"
    override val description = "Эмиссионный счет"
  }
  object Issuer extends AccountKindEt {
    override val code = "Issuer"
    override val description = "Лицевой счет эмитента"
  }
  object Owner extends AccountKindEt {
    override val code = "Owner"
    override val description = "Владелец"
  }
  object Nominee extends AccountKindEt {
    override val code = "Nominee"
    override val description = "Номинальный держатель"
  }
  object Trustee extends AccountKindEt {
    override val code = "Trustee"
    override val description = "Доверительный управляющий"
  }
  object Pledgee extends AccountKindEt {
    override val code = "Pledgee"
    override val description = "Залогодержатель"
  }
  object Unknown extends AccountKindEt {
    override val code = "Unknown"
    override val description = "Счет неустановленных лиц"
  }
  object Notary extends AccountKindEt {
    override val code = "Notary"
    override val description = "Нотариус"
  }
  object ProxyHolder extends AccountKindEt {
    override val code = "ProxyHolder"
    override val description = "Доверительный управляющий правами"
  }
  object Treasury extends AccountKindEt {
    override val code = "Treasury"
    override val description = "Казначейский счет эмитента"
  }
  object Deposit extends AccountKindEt {
    override val code = "Deposit"
    override val description = "Депозитный счет"
  }
  object NdCd extends AccountKindEt {
    override val code = "NdCd"
    override val description = "Номинальный держатель центрального депозитария"
  }
  object ForeignNominee extends AccountKindEt {
    override val code = "ForeignNominee"
    override val description = "Иностранный номинальный держатель"
  }
  object ForeignAuthorizedHolder extends AccountKindEt {
    override val code = "ForeignAuthorizedHolder"
    override val description = "Иностранный уполномоченный держатель"
  }
  object DepoProgram extends AccountKindEt {
    override val code = "DepoProgram"
    override val description = "Счет депозитарных программ"
  }
  
  lazy val values = Set[AccountKindEt](
    Issuance,
    Issuer,
    Owner,
    Nominee,
    Trustee,
    Pledgee,
    Unknown,
    Notary,
    ProxyHolder,
    Treasury,
    Deposit,
    NdCd,
    ForeignNominee,
    ForeignAuthorizedHolder,
    DepoProgram
  )
  
  val fromString: String => Option[AccountKindEt] = {
    s => values.find(_.code === s)
  }
}

/** Статус оплаты */
sealed trait PaymentStateEt {
  val code: String
  val description: String
}
/** Статус оплаты */
object PaymentStateEt {
  object PendingPayment extends PaymentStateEt {
    override val code = "PendingPayment"
    override val description = "Ожидает оплаты"
  }
  object Paid extends PaymentStateEt {
    override val code = "Paid"
    override val description = "Оплачено"
  }
  object PendingRefund extends PaymentStateEt {
    override val code = "PendingRefund"
    override val description = "Требует возврата"
  }
  object Refunded extends PaymentStateEt {
    override val code = "Refunded"
    override val description = "Деньги возвращены"
  }
  object NoPaymentRequired extends PaymentStateEt {
    override val code = "NoPaymentRequired"
    override val description = "Оплата не требуется"
  }
  object DeterminedByRegistrar extends PaymentStateEt {
    override val code = "DeterminedByRegistrar"
    override val description = "Определяется регистратором"
  }
  
  lazy val values = Set[PaymentStateEt](
    PendingPayment,
    Paid,
    PendingRefund,
    Refunded,
    NoPaymentRequired,
    DeterminedByRegistrar
  )
  
  val fromString: String => Option[PaymentStateEt] = {
    s => values.find(_.code === s)
  }
}

/** Тип плательщика */
sealed trait PayerTypeEt {
  val code: String
  val description: String
}
/** Тип плательщика */
object PayerTypeEt {
  object Account extends PayerTypeEt {
    override val code = "Account"
    override val description = "Зарегистрированное лицо"
  }
  object Sender extends PayerTypeEt {
    override val code = "Sender"
    override val description = "Отправитель"
  }
  object DebitAccount extends PayerTypeEt {
    override val code = "DebitAccount"
    override val description = "Счет списания"
  }
  object CreditAccount extends PayerTypeEt {
    override val code = "CreditAccount"
    override val description = "Счет зачисления"
  }
  
  lazy val values = Set[PayerTypeEt](
    Account,
    Sender,
    DebitAccount,
    CreditAccount
  )
  
  val fromString: String => Option[PayerTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Тип отчета */
sealed trait ReportTypeEt {
  val code: String
  val description: String
}
/** Тип отчета */
object ReportTypeEt {
  object AccountStatement extends ReportTypeEt {
    override val code = "AccountStatement"
    override val description = "Выписка/справка из реестра о состоянии счета"
  }
  object StatementOfAvailability extends ReportTypeEt {
    override val code = "StatementOfAvailability"
    override val description = "Справка о наличии на счете ЦБ"
  }
  object StatementOfTransactions extends ReportTypeEt {
    override val code = "StatementOfTransactions"
    override val description = "Справка об операциях по счету"
  }
  object StatementOfConfirmation extends ReportTypeEt {
    override val code = "StatementOfConfirmation"
    override val description = "Уведомление о проведенной операции"
  }
  
  lazy val values = Set[ReportTypeEt](
    AccountStatement,
    StatementOfAvailability,
    StatementOfTransactions,
    StatementOfConfirmation
  )
  
  val fromString: String => Option[ReportTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Код статуса налогоплательщика */
sealed trait TaxpayerStatusEt {
  val code: String
  val description: String
}
/** Код статуса налогоплательщика */
object TaxpayerStatusEt {
  object Resident extends TaxpayerStatusEt {
    override val code = "Resident"
    override val description = "Налоговый резидент"
  }
  object NotResident extends TaxpayerStatusEt {
    override val code = "NotResident"
    override val description = "Налоговый нерезидент"
  }
  
  lazy val values = Set[TaxpayerStatusEt](
    Resident,
    NotResident
  )
  
  val fromString: String => Option[TaxpayerStatusEt] = {
    s => values.find(_.code === s)
  }
}

/** Виды ЮЛ */
sealed trait LegalSpecialKindEt {
  val code: String
  val description: String
}
/** Виды ЮЛ */
object LegalSpecialKindEt {
  object FederalGovermentAuthority extends LegalSpecialKindEt {
    override val code = "FederalGovermentAuthority"
    override val description = "Федеральный гос.орган"
  }
  object MunicipalAuthority extends LegalSpecialKindEt {
    override val code = "MunicipalAuthority"
    override val description = "Муниципальный орган"
  }
  object RussianSubject extends LegalSpecialKindEt {
    override val code = "RussianSubject"
    override val description = "Субъект РФ"
  }
  
  lazy val values = Set[LegalSpecialKindEt](
    FederalGovermentAuthority,
    MunicipalAuthority,
    RussianSubject
  )
  
  val fromString: String => Option[LegalSpecialKindEt] = {
    s => values.find(_.code === s)
  }
}

/** Тип передаточного распоряжения */
sealed trait TransactionTypeEt {
  val code: String
  val description: String
}
/** Тип передаточного распоряжения */
object TransactionTypeEt {
  object V_60101 extends TransactionTypeEt {
    override val code = "60101"
    override val description = "Передача по договору купли-продажи (мены)"
  }
  object V_60102 extends TransactionTypeEt {
    override val code = "60102"
    override val description = "Передача по договору дарения"
  }
  object V_60103 extends TransactionTypeEt {
    override val code = "60103"
    override val description = "Передача при наследовании"
  }
  object V_60105 extends TransactionTypeEt {
    override val code = "60105"
    override val description = "Передача при невыполнении условий залога"
  }
  object V_60106 extends TransactionTypeEt {
    override val code = "60106"
    override val description = "Первичное размещение"
  }
  object V_60108 extends TransactionTypeEt {
    override val code = "60108"
    override val description = "Приобретение (выкуп) эмитентом"
  }
  object V_60112 extends TransactionTypeEt {
    override val code = "60112"
    override val description = "Передача на счет НД"
  }
  object V_60130 extends TransactionTypeEt {
    override val code = "60130"
    override val description = "Возврат со счета НД"
  }
  object V_60131 extends TransactionTypeEt {
    override val code = "60131"
    override val description = "Передача на счет НД ЦД"
  }
  object V_60132 extends TransactionTypeEt {
    override val code = "60132"
    override val description = "Возврат со счета НД ЦД"
  }
  object V_60133 extends TransactionTypeEt {
    override val code = "60133"
    override val description = "Передача в депозит нотариуса"
  }
  object V_60201 extends TransactionTypeEt {
    override val code = "60201"
    override val description = "Возврат из депозита нотариуса"
  }
  object V_60301 extends TransactionTypeEt {
    override val code = "60301"
    override val description = "Передача на счет ДУ"
  }
  object V_60302 extends TransactionTypeEt {
    override val code = "60302"
    override val description = "Возврат со счета ДУ"
  }
  object V_60305 extends TransactionTypeEt {
    override val code = "60305"
    override val description = "Объединение лицевых счетов"
  }
  object V_60308 extends TransactionTypeEt {
    override val code = "60308"
    override val description = "Передача по иным основаниям"
  }
  
  lazy val values = Set[TransactionTypeEt](
    V_60101,
    V_60102,
    V_60103,
    V_60105,
    V_60106,
    V_60108,
    V_60112,
    V_60130,
    V_60131,
    V_60132,
    V_60133,
    V_60201,
    V_60301,
    V_60302,
    V_60305,
    V_60308
  )
  
  val fromString: String => Option[TransactionTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Вид ценной бумаги */
sealed trait SecurityClassificationEt {
  val code: String
  val description: String
}
/** Вид ценной бумаги */
object SecurityClassificationEt {
  object Bond extends SecurityClassificationEt {
    override val code = "Bond"
    override val description = "Облигация"
  }
  object Share extends SecurityClassificationEt {
    override val code = "Share"
    override val description = "Акция"
  }
  object InvestmentUnit extends SecurityClassificationEt {
    override val code = "InvestmentUnit"
    override val description = "Инвестиционный пай"
  }
  object RussianDepositaryReceipt extends SecurityClassificationEt {
    override val code = "RussianDepositaryReceipt"
    override val description = "Российская депозитарная расписка"
  }
  
  lazy val values = Set[SecurityClassificationEt](
    Bond,
    Share,
    InvestmentUnit,
    RussianDepositaryReceipt
  )
  
  val fromString: String => Option[SecurityClassificationEt] = {
    s => values.find(_.code === s)
  }
}

sealed trait ResponseIssuanceMethodEt {
  val code: String
  val description: String
}
object ResponseIssuanceMethodEt {
  object Personally extends ResponseIssuanceMethodEt {
    override val code = "Personally"
    override val description = "Лично"
  }
  object Representative extends ResponseIssuanceMethodEt {
    override val code = "Representative"
    override val description = "Уполномоченным представителем"
  }
  object Courier extends ResponseIssuanceMethodEt {
    override val code = "Courier"
    override val description = "Курьером"
  }
  object OrderedLetter extends ResponseIssuanceMethodEt {
    override val code = "OrderedLetter"
    override val description = "Заказным письмом"
  }
  object Other extends ResponseIssuanceMethodEt {
    override val code = "Other"
    override val description = "Другим способом"
  }
  
  lazy val values = Set[ResponseIssuanceMethodEt](
    Personally,
    Representative,
    Courier,
    OrderedLetter,
    Other
  )
  
  val fromString: String => Option[ResponseIssuanceMethodEt] = {
    s => values.find(_.code === s)
  }
}

/** Код типа документа */
sealed trait DocumentTypeEt {
  val code: String
  val description: String
}
/** Код типа документа */
object DocumentTypeEt {
  object ApplicationToOpenIndividualAccount extends DocumentTypeEt {
    override val code = "ApplicationToOpenIndividualAccount"
    override val description = "Заявление на открытие лицевого счета (ФЛ)"
  }
  object ApplicationToOpenLegalAccount extends DocumentTypeEt {
    override val code = "ApplicationToOpenLegalAccount"
    override val description = "Заявление на открытие лицевого счета (ЮЛ)"
  }
  object ApplicationToOpenCoownershipAccount extends DocumentTypeEt {
    override val code = "ApplicationToOpenCoownershipAccount"
    override val description = "Заявление на открытие счета ОС/ОДС"
  }
  object FormOfIndividualShareholder extends DocumentTypeEt {
    override val code = "FormOfIndividualShareholder"
    override val description = "Анкета зарегистрированного лица (ФЛ)"
  }
  object FormOfLegalShareholder extends DocumentTypeEt {
    override val code = "FormOfLegalShareholder"
    override val description = "Анкета зарегистрированного лица (ЮЛ)"
  }
  object OrderToTransferShares extends DocumentTypeEt {
    override val code = "OrderToTransferShares"
    override val description = "Распоряжение о списании/зачислении ценных бумаг"
  }
  object OrderToConsolidateAccounts extends DocumentTypeEt {
    override val code = "OrderToConsolidateAccounts"
    override val description = "Распоряжение на объединение лицевых счетов"
  }
  object RequestForInformation extends DocumentTypeEt {
    override val code = "RequestForInformation"
    override val description = "Запрос на выдачу информации из реестра"
  }
  object OrderToBlock extends DocumentTypeEt {
    override val code = "OrderToBlock"
    override val description = "Распоряжение на блокирование"
  }
  object OrderToUnblock extends DocumentTypeEt {
    override val code = "OrderToUnblock"
    override val description = "Распоряжение на отмену блокирования"
  }
  object OrderToPledge extends DocumentTypeEt {
    override val code = "OrderToPledge"
    override val description = "Залоговое распоряжение"
  }
  object OrderToChangePledge extends DocumentTypeEt {
    override val code = "OrderToChangePledge"
    override val description = "Распоряжение о внесении изменений в условия залога"
  }
  object OrderToUnpledge extends DocumentTypeEt {
    override val code = "OrderToUnpledge"
    override val description = "Распоряжение о прекращении залога"
  }
  object OrderToTransferPledgeRights extends DocumentTypeEt {
    override val code = "OrderToTransferPledgeRights"
    override val description = "Распоряжение о переуступке права требования по залогу"
  }
  object Proxy extends DocumentTypeEt {
    override val code = "Proxy"
    override val description = "Доверенность"
  }
  object InformationOnRepresentative extends DocumentTypeEt {
    override val code = "InformationOnRepresentative"
    override val description = "Сведения об уполномоченном представителе"
  }
  object DocumentOfHeadAppointment extends DocumentTypeEt {
    override val code = "DocumentOfHeadAppointment"
    override val description = "Документ о назначении руководителя"
  }
  object FormOfShareholderAppendix extends DocumentTypeEt {
    override val code = "FormOfShareholderAppendix"
    override val description = "Приложение к анкете зарегистрированного лица"
  }
  object InformationOnBeneficiaries extends DocumentTypeEt {
    override val code = "InformationOnBeneficiaries"
    override val description = "Сведения о бенефициарных владельцах и/или выгодоприобретателях"
  }
  object Other extends DocumentTypeEt {
    override val code = "Other"
    override val description = "Другой тип документа"
  }
  
  lazy val values = Set[DocumentTypeEt](
    ApplicationToOpenIndividualAccount,
    ApplicationToOpenLegalAccount,
    ApplicationToOpenCoownershipAccount,
    FormOfIndividualShareholder,
    FormOfLegalShareholder,
    OrderToTransferShares,
    OrderToConsolidateAccounts,
    RequestForInformation,
    OrderToBlock,
    OrderToUnblock,
    OrderToPledge,
    OrderToChangePledge,
    OrderToUnpledge,
    OrderToTransferPledgeRights,
    Proxy,
    InformationOnRepresentative,
    DocumentOfHeadAppointment,
    FormOfShareholderAppendix,
    InformationOnBeneficiaries,
    Other
  )
  
  val fromString: String => Option[DocumentTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Универсальный уникальный идентификатор 			 */
type UuidT = String

/** ОГРН юридического лица */
final case class OgrnT(
  ogrn: String /** ОГРН */,
  date: Instant /** Дата выдачи */,
  place: Option[Any] /** Место выдачи */
)

/** Интервал дат */
final case class DateIntervalT(
  from: Instant /** С */,
  to: Option[Instant] /** По */
)

/** Справочник регионов России */
sealed trait RegionEt {
  val code: String
  val description: String
}
/** Справочник регионов России */
object RegionEt {
  object V_1 extends RegionEt {
    override val code = "1"
    override val description = "Адыгея республика"
  }
  object V_2 extends RegionEt {
    override val code = "2"
    override val description = "Башкортостан республика"
  }
  object V_3 extends RegionEt {
    override val code = "3"
    override val description = "Бурятия республика"
  }
  object V_4 extends RegionEt {
    override val code = "4"
    override val description = "Алтай республика"
  }
  object V_5 extends RegionEt {
    override val code = "5"
    override val description = "Дагестан республика"
  }
  object V_6 extends RegionEt {
    override val code = "6"
    override val description = "Ингушетия республика"
  }
  object V_7 extends RegionEt {
    override val code = "7"
    override val description = "Кабардино-Балкарская республика"
  }
  object V_8 extends RegionEt {
    override val code = "8"
    override val description = "Калмыкия республика"
  }
  object V_9 extends RegionEt {
    override val code = "9"
    override val description = "Карачаево-Черкесская республика"
  }
  object V_10 extends RegionEt {
    override val code = "10"
    override val description = "Карелия республика"
  }
  object V_11 extends RegionEt {
    override val code = "11"
    override val description = "Коми республика"
  }
  object V_12 extends RegionEt {
    override val code = "12"
    override val description = "Марий Эл республика"
  }
  object V_13 extends RegionEt {
    override val code = "13"
    override val description = "Мордовия республика"
  }
  object V_14 extends RegionEt {
    override val code = "14"
    override val description = "Саха /Якутия/ республика"
  }
  object V_15 extends RegionEt {
    override val code = "15"
    override val description = "Северная Осетия - Алания республика"
  }
  object V_16 extends RegionEt {
    override val code = "16"
    override val description = "Татарстан республика"
  }
  object V_17 extends RegionEt {
    override val code = "17"
    override val description = "Тыва республика"
  }
  object V_18 extends RegionEt {
    override val code = "18"
    override val description = "Удмуртская республика"
  }
  object V_19 extends RegionEt {
    override val code = "19"
    override val description = "Хакасия республика"
  }
  object V_20 extends RegionEt {
    override val code = "20"
    override val description = "Чеченская республика"
  }
  object V_21 extends RegionEt {
    override val code = "21"
    override val description = "Чувашская республика"
  }
  object V_22 extends RegionEt {
    override val code = "22"
    override val description = "Алтайский край"
  }
  object V_23 extends RegionEt {
    override val code = "23"
    override val description = "Краснодарский край"
  }
  object V_24 extends RegionEt {
    override val code = "24"
    override val description = "Красноярский край"
  }
  object V_25 extends RegionEt {
    override val code = "25"
    override val description = "Приморский край"
  }
  object V_26 extends RegionEt {
    override val code = "26"
    override val description = "Ставропольский край"
  }
  object V_27 extends RegionEt {
    override val code = "27"
    override val description = "Хабаровский край"
  }
  object V_28 extends RegionEt {
    override val code = "28"
    override val description = "Амурская область"
  }
  object V_29 extends RegionEt {
    override val code = "29"
    override val description = "Архангельская область"
  }
  object V_30 extends RegionEt {
    override val code = "30"
    override val description = "Астраханская область"
  }
  object V_31 extends RegionEt {
    override val code = "31"
    override val description = "Белгородская область"
  }
  object V_32 extends RegionEt {
    override val code = "32"
    override val description = "Брянская область"
  }
  object V_33 extends RegionEt {
    override val code = "33"
    override val description = "Владимирская область"
  }
  object V_34 extends RegionEt {
    override val code = "34"
    override val description = "Волгоградская область"
  }
  object V_35 extends RegionEt {
    override val code = "35"
    override val description = "Вологодская область"
  }
  object V_36 extends RegionEt {
    override val code = "36"
    override val description = "Воронежская область"
  }
  object V_37 extends RegionEt {
    override val code = "37"
    override val description = "Ивановская область"
  }
  object V_38 extends RegionEt {
    override val code = "38"
    override val description = "Иркутская область"
  }
  object V_39 extends RegionEt {
    override val code = "39"
    override val description = "Калининградская область"
  }
  object V_40 extends RegionEt {
    override val code = "40"
    override val description = "Калужская область"
  }
  object V_41 extends RegionEt {
    override val code = "41"
    override val description = "Камчатский край"
  }
  object V_42 extends RegionEt {
    override val code = "42"
    override val description = "Кемеровская область"
  }
  object V_43 extends RegionEt {
    override val code = "43"
    override val description = "Кировская область"
  }
  object V_44 extends RegionEt {
    override val code = "44"
    override val description = "Костромская область"
  }
  object V_45 extends RegionEt {
    override val code = "45"
    override val description = "Курганская область"
  }
  object V_46 extends RegionEt {
    override val code = "46"
    override val description = "Курская область"
  }
  object V_47 extends RegionEt {
    override val code = "47"
    override val description = "Ленинградская область"
  }
  object V_48 extends RegionEt {
    override val code = "48"
    override val description = "Липецкая область"
  }
  object V_49 extends RegionEt {
    override val code = "49"
    override val description = "Магаданская область"
  }
  object V_50 extends RegionEt {
    override val code = "50"
    override val description = "Московская область"
  }
  object V_51 extends RegionEt {
    override val code = "51"
    override val description = "Мурманская область"
  }
  object V_52 extends RegionEt {
    override val code = "52"
    override val description = "Нижегородская область"
  }
  object V_53 extends RegionEt {
    override val code = "53"
    override val description = "Новгородская область"
  }
  object V_54 extends RegionEt {
    override val code = "54"
    override val description = "Новосибирская область"
  }
  object V_55 extends RegionEt {
    override val code = "55"
    override val description = "Омская область"
  }
  object V_56 extends RegionEt {
    override val code = "56"
    override val description = "Оренбургская область"
  }
  object V_57 extends RegionEt {
    override val code = "57"
    override val description = "Орловская область"
  }
  object V_58 extends RegionEt {
    override val code = "58"
    override val description = "Пензенская область"
  }
  object V_59 extends RegionEt {
    override val code = "59"
    override val description = "Пермский край"
  }
  object V_60 extends RegionEt {
    override val code = "60"
    override val description = "Псковская область"
  }
  object V_61 extends RegionEt {
    override val code = "61"
    override val description = "Ростовская область"
  }
  object V_62 extends RegionEt {
    override val code = "62"
    override val description = "Рязанская область"
  }
  object V_63 extends RegionEt {
    override val code = "63"
    override val description = "Самарская область"
  }
  object V_64 extends RegionEt {
    override val code = "64"
    override val description = "Саратовская область"
  }
  object V_65 extends RegionEt {
    override val code = "65"
    override val description = "Сахалинская область"
  }
  object V_66 extends RegionEt {
    override val code = "66"
    override val description = "Свердловская область"
  }
  object V_67 extends RegionEt {
    override val code = "67"
    override val description = "Смоленская область"
  }
  object V_68 extends RegionEt {
    override val code = "68"
    override val description = "Тамбовская область"
  }
  object V_69 extends RegionEt {
    override val code = "69"
    override val description = "Тверская область"
  }
  object V_70 extends RegionEt {
    override val code = "70"
    override val description = "Томская область"
  }
  object V_71 extends RegionEt {
    override val code = "71"
    override val description = "Тульская область"
  }
  object V_72 extends RegionEt {
    override val code = "72"
    override val description = "Тюменская область"
  }
  object V_73 extends RegionEt {
    override val code = "73"
    override val description = "Ульяновская область"
  }
  object V_74 extends RegionEt {
    override val code = "74"
    override val description = "Челябинская область"
  }
  object V_75 extends RegionEt {
    override val code = "75"
    override val description = "Забайкальский край"
  }
  object V_76 extends RegionEt {
    override val code = "76"
    override val description = "Ярославская область"
  }
  object V_77 extends RegionEt {
    override val code = "77"
    override val description = "Москва г."
  }
  object V_78 extends RegionEt {
    override val code = "78"
    override val description = "Санкт-Петербург г."
  }
  object V_79 extends RegionEt {
    override val code = "79"
    override val description = "Еврейская автономная область"
  }
  object V_83 extends RegionEt {
    override val code = "83"
    override val description = "Ненецкий автономный округ"
  }
  object V_84 extends RegionEt {
    override val code = "84"
    override val description = "Таймырский (Долгано-Ненецкий) автономный округ"
  }
  object V_86 extends RegionEt {
    override val code = "86"
    override val description = "Ханты-Мансийский - Югра автономный округ"
  }
  object V_87 extends RegionEt {
    override val code = "87"
    override val description = "Чукотский автономный округ"
  }
  object V_89 extends RegionEt {
    override val code = "89"
    override val description = "Ямало-Ненецкий автономный округ"
  }
  object V_91 extends RegionEt {
    override val code = "91"
    override val description = "Крым республика"
  }
  object V_92 extends RegionEt {
    override val code = "92"
    override val description = "Севастополь г."
  }
  object V_99 extends RegionEt {
    override val code = "99"
    override val description = "Байконур г."
  }
  
  lazy val values = Set[RegionEt](
    V_1,
    V_2,
    V_3,
    V_4,
    V_5,
    V_6,
    V_7,
    V_8,
    V_9,
    V_10,
    V_11,
    V_12,
    V_13,
    V_14,
    V_15,
    V_16,
    V_17,
    V_18,
    V_19,
    V_20,
    V_21,
    V_22,
    V_23,
    V_24,
    V_25,
    V_26,
    V_27,
    V_28,
    V_29,
    V_30,
    V_31,
    V_32,
    V_33,
    V_34,
    V_35,
    V_36,
    V_37,
    V_38,
    V_39,
    V_40,
    V_41,
    V_42,
    V_43,
    V_44,
    V_45,
    V_46,
    V_47,
    V_48,
    V_49,
    V_50,
    V_51,
    V_52,
    V_53,
    V_54,
    V_55,
    V_56,
    V_57,
    V_58,
    V_59,
    V_60,
    V_61,
    V_62,
    V_63,
    V_64,
    V_65,
    V_66,
    V_67,
    V_68,
    V_69,
    V_70,
    V_71,
    V_72,
    V_73,
    V_74,
    V_75,
    V_76,
    V_77,
    V_78,
    V_79,
    V_83,
    V_84,
    V_86,
    V_87,
    V_89,
    V_91,
    V_92,
    V_99
  )
  
  val fromString: String => Option[RegionEt] = {
    s => values.find(_.code === s)
  }
}

/** Информация, идентифицирующая субъекта */
final case class PersonIdentifierT(
  name: String /** Наименование/ФИО */,
  identificationData: String /** Идентификационные данные */
)

final case class FractiontNatural(
  integral: Int /** Целая часть */,
  numerator: Int /** Числитель */,
  denominator: Int /** Знаменатель */
)

/** Код типа документа о регистрации юридического лица */
sealed trait LegalRegistrationDocumentTypeEt {
  val code: String
  val description: String
}
/** Код типа документа о регистрации юридического лица */
object LegalRegistrationDocumentTypeEt {
  object License extends LegalRegistrationDocumentTypeEt {
    override val code = "License"
    override val description = "Лицензия"
  }
  object RegistrationCertificate extends LegalRegistrationDocumentTypeEt {
    override val code = "RegistrationCertificate"
    override val description = "Свидетельство о регистрации"
  }
  object CertificateOfIncorporation extends LegalRegistrationDocumentTypeEt {
    override val code = "CertificateOfIncorporation"
    override val description = "Сертификат об инкорпорации"
  }
  object Charter extends LegalRegistrationDocumentTypeEt {
    override val code = "Charter"
    override val description = "Устав"
  }
  object PresidentialDecree extends LegalRegistrationDocumentTypeEt {
    override val code = "PresidentialDecree"
    override val description = "Указ Президента"
  }
  object Resolution extends LegalRegistrationDocumentTypeEt {
    override val code = "Resolution"
    override val description = "Постановление"
  }
  object Other extends LegalRegistrationDocumentTypeEt {
    override val code = "Other"
    override val description = "Другой документ"
  }
  
  lazy val values = Set[LegalRegistrationDocumentTypeEt](
    License,
    RegistrationCertificate,
    CertificateOfIncorporation,
    Charter,
    PresidentialDecree,
    Resolution,
    Other
  )
  
  val fromString: String => Option[LegalRegistrationDocumentTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Описание прикрепленного файла */
final case class AttachmentInfoT(
  mimeType: String /** MIME тип */,
  location: String /** Местоположение ресурса */
)

/** Код типа документа, удостоверяющего личность физического лица */
sealed trait IndividualDocumentTypeEt {
  val code: String
  val description: String
}
/** Код типа документа, удостоверяющего личность физического лица */
object IndividualDocumentTypeEt {
  object V_01 extends IndividualDocumentTypeEt {
    override val code = "01"
    override val description = "Паспорт гражданина СССР"
  }
  object V_02 extends IndividualDocumentTypeEt {
    override val code = "02"
    override val description = "Заграничный паспорт гражданина СССР"
  }
  object V_03 extends IndividualDocumentTypeEt {
    override val code = "03"
    override val description = "Свидетельство о рождении"
  }
  object V_04 extends IndividualDocumentTypeEt {
    override val code = "04"
    override val description = "Удостоверение личности офицера"
  }
  object V_05 extends IndividualDocumentTypeEt {
    override val code = "05"
    override val description = "Справка об освобождении из места лишения свободы"
  }
  object V_06 extends IndividualDocumentTypeEt {
    override val code = "06"
    override val description = "Паспорт моряка Минморфлота"
  }
  object V_07 extends IndividualDocumentTypeEt {
    override val code = "07"
    override val description = "Военный билет"
  }
  object V_08 extends IndividualDocumentTypeEt {
    override val code = "08"
    override val description = "Временное удостоверение, выданное взамен военного билета"
  }
  object V_09 extends IndividualDocumentTypeEt {
    override val code = "09"
    override val description = "Дипломатический паспорт гражданина РФ"
  }
  object V_10 extends IndividualDocumentTypeEt {
    override val code = "10"
    override val description = "Паспорт иностранного гражданина"
  }
  object V_11 extends IndividualDocumentTypeEt {
    override val code = "11"
    override val description = "Свидетельство о рассмотрении ходатайства о признании лица беженцем"
  }
  object V_12 extends IndividualDocumentTypeEt {
    override val code = "12"
    override val description = "Вид на жительство в РФ"
  }
  object V_13 extends IndividualDocumentTypeEt {
    override val code = "13"
    override val description = "Удостоверение беженца в РФ"
  }
  object V_14 extends IndividualDocumentTypeEt {
    override val code = "14"
    override val description = "Временное удостоверение личности гражданина РФ"
  }
  object V_15 extends IndividualDocumentTypeEt {
    override val code = "15"
    override val description = "Разрешение на временное проживание в РФ"
  }
  object V_18 extends IndividualDocumentTypeEt {
    override val code = "18"
    override val description = "Свидетельство о предоставлении убежища на территории РФ"
  }
  object V_21 extends IndividualDocumentTypeEt {
    override val code = "21"
    override val description = "Паспорт гражданина РФ"
  }
  object V_22 extends IndividualDocumentTypeEt {
    override val code = "22"
    override val description = "Заграничный паспорт гражданина РФ"
  }
  object V_23 extends IndividualDocumentTypeEt {
    override val code = "23"
    override val description = "Свидетельство о рождении, выданное уполномоченным органом иностранного государства"
  }
  object V_24 extends IndividualDocumentTypeEt {
    override val code = "24"
    override val description = "Удостоверение личности военнослужащего Российской Федерации"
  }
  object V_26 extends IndividualDocumentTypeEt {
    override val code = "26"
    override val description = "Паспорт моряка"
  }
  object V_27 extends IndividualDocumentTypeEt {
    override val code = "27"
    override val description = "Военный билет офицера запаса"
  }
  object V_91 extends IndividualDocumentTypeEt {
    override val code = "91"
    override val description = "Иные, выдаваемые органами внутренних дел РФ"
  }
  object V_00 extends IndividualDocumentTypeEt {
    override val code = "00"
    override val description = "Не указан"
  }
  
  lazy val values = Set[IndividualDocumentTypeEt](
    V_01,
    V_02,
    V_03,
    V_04,
    V_05,
    V_06,
    V_07,
    V_08,
    V_09,
    V_10,
    V_11,
    V_12,
    V_13,
    V_14,
    V_15,
    V_18,
    V_21,
    V_22,
    V_23,
    V_24,
    V_26,
    V_27,
    V_91,
    V_00
  )
  
  val fromString: String => Option[IndividualDocumentTypeEt] = {
    s => values.find(_.code === s)
  }
}

/** Ссылка на операцию */
final case class TransactionLinkT(
  taIncomingDocument: Option[DocumentLinkT] /** Входящий документ у ТА */,
  regIncomingDocument: Option[DocumentLinkT] /** Входящий документ у регистратора */,
  senderOutgoingDocument: Option[DocumentLinkT] /** Исходящий документ у отправителя */,
  operation: Option[OperationLinkT] /** Операция в реестре */
)

/** Документ основание для передачи прав собственности */
final case class TransactionBaseDocumentT(
  type: TransactionBaseDocumentTypeEt /** Тип документа */,
  num: String /** Номер документа */,
  date: Instant /** Дата документа */
)

/** Неструктурированный адрес */
final case class UnstructuredAddressT(
  country: Option[CountryEt] /** Код страны */,
  index: Option[String] /** Почтовый индекс */,
  address: String /** Адрес */
)

/** Информация о банковском счете */
final case class BankAccountInfoT(
  bank: BankInfoT /** Информация о банке */,
  account: String /** Счет */,
  accountInBranch: Option[String] /** Лицевой счет в филиале */,
  additionalInfo: Option[String] /** Дополнительная информация */,
  paymentReceiver: Option[PaymentReceiverInfoT] /** Получатель платежа (в случае, если это не зарегистрированное лицо) */
)

/** Информация о публичном официальном лице */
final case class PublicOfficialInfoT(
  foreignType: Option[ForeignPublicOfficialTypeEt] /** Тип иностранного публичного должностного лица */,
  information: Option[String] /** Сведения */,
  russianPublicOfficial: Option[String] /** Публичное должностное лицо РФ */
)

/** Тип входящего документа */
final case class DocumentTypeT(
  code: DocumentTypeEt /** Код типа документа */,
  name: Option[String] /** Наименование документа, если его тип - Other */
)

/** Идентификатор объекта */
type IdT = UuidT

/** Структурированный адрес */
final case class StructuredAddressT(
  country: Option[CountryEt] /** Страна из Общероссийского классификатора стран мира ОК (МК (ИСО 3166) 004-97) 025-2001 */,
  index: Option[String] /** Почтовый индекс */,
  regionNumber: Option[RegionEt] /** Код региона по справочнику регионов России */,
  regionType: Option[String] /** Тип региона */,
  region: Option[String] /** Наименование региона */,
  zoneType: Option[String] /** Тип района */,
  zone: Option[String] /** Район */,
  cityType: Option[String] /** Тип города */,
  city: Option[String] /** Город */,
  placeType: Option[String] /** Тип населенного пункта */,
  place: Option[String] /** Населенный пункт */,
  streetType: Option[String] /** Тип улицы */,
  street: Option[String] /** Улица */,
  house: Option[String] /** Номер дома/ домовладения */,
  building: Option[String] /** Корпус/строение */,
  flat: Option[String] /** Квартира/офис */
)

/** Информация, идентифицирующая эмитента */
type PersonIssuerT = PersonIdentifierT

/** Информация, идентифицирующая субъекта, не являющегося эмитентом или ЗЛ */
final case class PersonOtherT(
  individual: Option[PersonIdentifierT],
  legal: Option[PersonIdentifierT]
)

/** Субъект, в отношении которого подан документ */
final case class DocumentPersonT(
  kind: DocumentPersonKindEt /** В отношении кого подан документ */,
  individual: Option[PersonIdentifierT] /** ФЛ */,
  legal: Option[PersonIdentifierT] /** ЮЛ */,
  coownership: Option[PersonIdentifierT] /** Счет ОС/ОДС */
)

/** Натуральная или десятичная дробь */
final case class FractionT(
  decimal: Option[Double] /** Десятичная дробь */,
  natural: Option[FractiontNatural] /** Натуральная дробь */
)

/** Тип документа регистрации юридического лица */
final case class LegalRegistrationDocumentTypeT(
  code: LegalRegistrationDocumentTypeEt,
  name: Option[String]
)

/** Данные документа ФЛ */
final case class IndividualDocumentT(
  type: IndividualDocumentTypeEt /** Тип документа */,
  series: Option[String] /** Серия документа */,
  num: String /** Номер документа */,
  date: Option[Instant] /** Дата выдачи */,
  place: Option[String] /** Место выдачи */,
  subdivisionCode: Option[String] /** Код подразделения органа выдачи */
)

/** Список документов оснований для передачи прав собственности */
final case class TransactionBaseDocumentsT(
  document: List[TransactionBaseDocumentT]
)

/** Блок уведомления об операции */
final case class OperationNotificationInfoT(
  method: NotificationReceiptMethodEt /** Способ получения уведомления */,
  address: Option[UnstructuredAddressT] /** Адрес, на который отправить уведомление */
)

/** Реквизиты для выплаты дохода по ценным бумагам */
final case class PaymentRequisitesT(
  taxpayerStatus: TaxpayerStatusEt /** Статус налогоплательщика */,
  taxBenefit: Boolean /** Наличие налоговой льготы */,
  dividendPaymentMethod: Option[DividendPaymentMethodEt] /** Способ выплаты дивидендов */,
  bankAccount: Option[BankAccountInfoT] /** Информация о банковском счете */
)

/** Приложение к документу */
final case class DocumentAppendixT(
  type: DocumentTypeT /** Тип документа */,
  num: Option[String] /** Номер документа */,
  date: Option[Instant] /** Дата документа */,
  scanImage: Option[AttachmentInfoT] /** Скан образ приложения */
)

/** Информация об участнике обмена */
final case class ExchangeParticipantT(
  id: IdT /** Идентификатор стороны обмена */,
  participantType: ExchangeParticipantTypeEt /** Тип участника обмена */,
  name: String /** Наименование участника обмена 					 */
)

/** Ссылка на документ-основание */
final case class BaseDocumentLinkT(
  id: IdT /** Идентификатор сообщения */,
  outNum: Option[String] /** Исходящий номер документа у отправителя */,
  outDate: Option[Instant] /** Дата создания документа у отправителя */,
  inNum: String /** Входящий регистрационный номер */,
  inDate: Instant /** Дата регистрации входящего документа */,
  taNum: Option[String] /** Входящий номер документа у трансфер-агента */,
  taDate: Option[Instant] /** Дата регистрации документа у трансфер-агента */
)

/** Услуга */
final case class ServiceT(
  id: IdT /** Идентификатор строки списка услуг */,
  docType: Option[DocumentTypeEt] /** Тип документа */,
  transactionType: Option[TransactionTypeEt] /** Тип передаточного распоряжения */,
  reportType: Option[ReportTypeEt] /** Тип отчета */,
  payerType: PayerTypeEt /** Тип плательщика */,
  price: Option[MoneyT] /** Цена */,
  paymentState: PaymentStateEt /** Статус оплаты */
)

/** Юридический адрес */
final case class LegalAddressT(
  structured: Option[StructuredAddressT] /** Структурированный адрес */,
  unstructured: Option[UnstructuredAddressT] /** Неструктурированный адрес */
)

/** Информация, идентифицирующая ЗЛ как отправителя */
final case class PersonAccountT extends PersonOtherT(
  kind: AccountKindEt
)

/** Информация о совладельце в анкете ЗЛ */
final case class CoownerFormInfoT(
  shareOwnership: Boolean /** Признак общей долевой собственности */,
  portion: Option[FractionT] /** Доля совладельца */
)

/** Информация о ценной бумаге */
final case class SecurityInfoT(
  id: IdT /** Уникальный идентификатор ЦБ */,
  classification: SecurityClassificationEt /** Вид ценной бумаги */,
  category: Option[SecurityCategoryEt] /** Категория ценной бумаги по предоставляемым правам */,
  prefix: Option[String] /** Префикс ценной бумаги */,
  type: Option[String] /** Тип ценной бумаги */,
  nominal: Option[FractionT] /** Номинал */,
  isin: Option[String] /** ISIN */,
  stateRegNum: String /** Государственный регистрационный номер */,
  stateRegDate: Option[Instant] /** Дата государственной регистрации */
)

/** Документ регистрации юридического лица */
final case class LegalRegistrationDocumentT(
  type: LegalRegistrationDocumentTypeT /** Тип документа о регистрации юридического лица */,
  series: Option[String] /** Серия документа */,
  num: String /** Номер документа */,
  date: Instant /** Дата документа */,
  place: Option[String] /** Орган, осуществивший регистрацию */
)

/** Анкета ФЛ */
final case class IndividualFormT(
  name: String /** Фамилия, Имя, Отчество */,
  citizenship: Option[CountryEt] /** Гражданство */,
  birthday: Option[Instant] /** День рождения */,
  birthplace: Option[String] /** Место рождения */,
  legalCapacity: Option[LegalCapacityStateEt] /** Дееспособность */,
  subtype: Option[IndividualSubtypeEt] /** Подтип ФЛ */,
  document: IndividualDocumentT /** Документ, удостоверяющий личность */,
  placeOfRegistration: UnstructuredAddressT /** Место регистрации */,
  residence: UnstructuredAddressT /** Место жительства */,
  inn: Option[String] /** ИНН */,
  snils: Option[String] /** СНИЛС */,
  responceIssuanceMethod: Option[ResponseIssuanceMethodEt] /** Способ выдачи ответных исходящих */,
  allowSendIncomingDocumentsViaMail: Option[Boolean] /** Допустимо предоставление входящих почтой */,
  phone: Option[String] /** Телефон */,
  fax: Option[String] /** Факс */,
  email: Option[String] /** Электронная почта */
)

/** Характеристика физического лица */
final case class IndividualInfoT(
  name: String /** Ф.И.О. */,
  document: IndividualDocumentT /** Данные документа ФЛ */
)

/** Блок уведомления */
final case class NotificationsInfoT(
  sendRejectNotificationTo: Option[UnstructuredAddressT] /** Уведомление об отказе посылать на адрес */,
  operationNotification: Option[OperationNotificationInfoT] /** Уведомление об операции */
)

/** Список приложений к документу */
final case class DocumentAppendicesT(
  appendix: List[DocumentAppendixT]
)

/** Заголовок сообщения */
final case class MessageHeaderT(
  version: String /** Версия схемы */,
  id: IdT /** Уникальный идентификатор сообщения */,
  sender: ExchangeParticipantT /** Отправитель сообщения */,
  recipient: ExchangeParticipantT /** Получатель сообщения */
)

/** Заголовок документа */
final case class DocumentHeaderT(
  type: DocumentTypeT /** Тип документа */,
  outNum: Option[String] /** Исходящий номер у отправителя */,
  outDate: Option[Instant],
  baseDocument: Option[BaseDocumentLinkT] /** Ссылка на инициирующий документ */
)

/** Список услуг */
final case class ServicesT(
  service: List[ServiceT] /** Услуга */
)

/** Отправитель документа */
final case class DocumentSenderT(
  issuer: Option[PersonIssuerT] /** Эмитент */,
  account: Option[PersonAccountT] /** ЗЛ */,
  other: Option[PersonOtherT] /** Другое лицо */
)

/** Неструктурированное содержимое документа */
final case class UnstructuredDocumentContentT(
  security: Option[SecurityInfoT] /** Ценная бумага (используется для частичной структуризации передаточного распоряжения) */,
  content: Option[String] /** Данные документа */
)

/** Данные регистрации юридического лица */
final case class LegalRegistrationT(
  ogrn: Option[OgrnT] /** ОГРН */,
  registrationDocument: Option[LegalRegistrationDocumentT] /** Документ гос.регистрации (для юридических лиц, зарегистрированных до 01.07.2002 и нерезидентов) */
)

/** Бенефициарный владелец */
type BeneficialOwnerT = IndividualFormT

/** Характеристика юридического лица */
final case class LegalInfoT(
  name: String /** Полное наименование */,
  registration: LegalRegistrationT /** Информация о регистрации юридического лица */
)

/** Анкета ЮЛ */
final case class LegalFormT(
  fullName: String /** Полное наименование */,
  shortName: String /** Краткое наименование */,
  registrationCountry: CountryEt /** Страна регистрации */,
  organisationForm: LegalOrganisationFormEt /** ОПФ */,
  specialKind: Option[LegalSpecialKindEt] /** Вид ЮЛ */,
  registration: LegalRegistrationT /** Информация о регистрации юридического лица */,
  locationAddress: UnstructuredAddressT /** Адрес места нахождения */,
  postAddress: UnstructuredAddressT /** Почтовый адрес */,
  inn: Option[String] /** ИНН */,
  kpp: Option[String] /** КПП */,
  okpo: Option[String] /** ОКПО */,
  okved: Option[String] /** ОКВЭД */,
  responceIssuanceMethod: Option[ResponseIssuanceMethodEt] /** Способ выдачи ответных исходящих */,
  allowSendIncomingDocumentsViaMail: Option[Boolean] /** Допустимо предоставление входящих почтой */,
  phone: Option[String] /** Телефон */,
  fax: Option[String] /** Факс */,
  email: Option[String] /** Электронная почта */
)

/** Список бенефициарных владельцев */
final case class BeneficialOwnersT(
  owner: List[BeneficialOwnerT] /** Бенефициарный владелец */
)

/** Идентификационные данные лица (для ФЛ, ЮЛ, ОС) */
final case class PersonInfoT(
  legal: Option[LegalInfoT] /** Характеристика юридического лица */,
  individual: Option[IndividualInfoT] /** Характеристика физического лица */,
  coowners: Option[CoownersInfoT] /** Характеристика счета общей собственности */
)

/** Данные ТА */
final case class TransferAgentInfoT(
  legalInfo: LegalInfoT /** Наименование и данные госрегистрации */,
  legalAddress: Option[LegalAddressT] /** Адрес места нахождения */
)

/** Идентификатор залогодержателя */
final case class PledgeeIdentifierT(
  individual: Option[IndividualInfoT] /** ФЛ */,
  legal: Option[LegalInfoT] /** ЮЛ */
)

/** Информация об эмитенте */
final case class IssuerInfoT(
  id: IdT /** Уникальный идентификатор эмитента */,
  info: LegalInfoT /** Информация об эмитенте */,
  address: Option[LegalAddressT] /** Адрес места нахождения */
)

/** Анкета официального лица */
final case class OfficialPersonFormT(
  individual: Option[IndividualFormT] /** Выгодоприобретатель - ФЛ */,
  legal: Option[LegalFormT] /** Выгодоприобретатель - ЮЛ */,
  position: Option[String] /** Должность */,
  expirationDate: Option[Instant] /** Дата окончания действия полномочий */
)

/** Анкета выгодоприобретателя */
final case class BeneficiaryFormT(
  individual: Option[IndividualFormT] /** Выгодоприобретатель - ФЛ */,
  legal: Option[LegalFormT] /** Выгодоприобретатель - ЮЛ */
)

/** Идентификатор ЗЛ */
final case class AccountIdentifierT(
  num: Option[String] /** Номер счета */,
  kind: AccountKindEt /** Тип счета */,
  personInfo: PersonInfoT /** Информация о ЗЛ */
)

/** Информация о передаче документа через ТА */
final case class TransferAgentDocumentInfoT(
  docNum: String /** Номер документа у ТА */,
  docDate: Instant /** Дата документа у ТА */,
  info: TransferAgentInfoT /** Информация о ТА */
)

/** Расширенная анкета ЮЛ */
final case class LegalFormExT extends LegalFormT(
  officialPerson: Option[OfficialPersonFormT] /** Официальное лицо */,
  beneficialOwners: Option[BeneficialOwnersT] /** Бенефициарные владельцы */
)

/** Запрос отчета */
final case class RequestForReportT(
  type: ReportTypeEt /** Тип запроса */,
  account: AccountIdentifierT /** Идентификатор ЗЛ */,
  date: Option[Instant] /** Дата */,
  interval: Option[DateIntervalT] /** Интервал дат */,
  security: Option[SecurityInfoT] /** Ценная бумага */,
  quantity: Option[FractionT] /** Количество */,
  transaction: Option[TransactionLinkT] /** Ссылка на операцию */
)

/** Передаточное распоряжение */
final case class InstructionToDeliverT(
  security: SecurityInfoT /** Ценная бумага */,
  quantity: FractionT /** Количество ЦБ */,
  transactionAmount: Double /** Сумма сделки */,
  cashPayment : Option[Boolean] /** Наличный расчет между участниками сделки */,
  type: TransactionTypeEt /** Тип операции */,
  baseDocuments: Option[TransactionBaseDocumentsT] /** Список документов оснований для передачи прав собственности */,
  debitAccount: AccountIdentifierT /** Счет списания */,
  creditAccount: AccountIdentifierT /** Счет зачисления */,
  pledgee: Option[PledgeeIdentifierT] /** Информация о счете залогодержателя */
)

/** Анкета зарегистрированного лица */
final case class FormOfShareholderT(
  kind: AccountKindEt /** Вид счета */,
  individual: Option[IndividualFormT] /** Анкета ФЛ */,
  legal: Option[LegalFormExT] /** Анкета ЮЛ */,
  coownerInfo: Option[CoownerFormInfoT] /** Информация о совладельце */,
  beneficiary: Option[BeneficiaryFormT] /** Выгодоприобретатель */,
  paymentRequisites: Option[PaymentRequisitesT] /** Реквизиты для выплаты дохода по ценным бумагам */,
  publicOfficial: Option[PublicOfficialInfoT] /** Информация о публичном официальном лице */,
  comment: Option[String] /** Комментарий */,
  autoUpdateForm: Boolean /** Согласие в случае непредоставления анкеты в течении года считать сведения обновленными */
)

/** Структурированное содержимое документа */
final case class StructuredDocumentContentT(
  requestForReport: Option[RequestForReportT] /** Запрос отчета */,
  formOfShareholder: Option[FormOfShareholderT] /** Анкета зарегистрированного лица */,
  instructionToDeliver: Option[InstructionToDeliverT] /** Передаточное распоряжение */
)

/** Содержимое документа */
final case class DocumentContentT(
  unstructured: Option[UnstructuredDocumentContentT] /** Неструктурированное содержимое документа */,
  structured: Option[StructuredDocumentContentT] /** Структурированное содержимое документа */,
  scanImage: Option[AttachmentInfoT] /** Скан образ документа */
)

final case class Document(
  messageHeader: MessageHeaderT /** Заголовок сообщения */,
  documentHeader: DocumentHeaderT /** Заголовок документа */,
  documentSender: Option[DocumentSenderT] /** Отправитель документа */,
  documentPerson: Option[DocumentPersonT] /** Субъект, в отношении которого подан документ */,
  documentAppendices: Option[DocumentAppendicesT] /** Список приложений к документу */,
  transferAgentDocumentInfo: Option[TransferAgentDocumentInfoT] /** Информация о передаче документа через ТА */,
  issuerInfo: Option[IssuerInfoT] /** Эмитент */,
  content: DocumentContentT /** Содержимое документа */,
  notifications: Option[NotificationsInfoT] /** Уведомления */,
  services: Option[ServicesT] /** Список услуг */
)